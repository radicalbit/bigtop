diff --git a/core/server/src/main/java/alluxio/web/WebInterfaceWorkerBlockInfoServlet.java b/core/server/src/main/java/alluxio/web/WebInterfaceWorkerBlockInfoServlet.java
index 291d5b2..225ea83 100644
--- a/core/server/src/main/java/alluxio/web/WebInterfaceWorkerBlockInfoServlet.java
+++ b/core/server/src/main/java/alluxio/web/WebInterfaceWorkerBlockInfoServlet.java
@@ -11,6 +11,25 @@

 package alluxio.web;

+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Map.Entry;
+import java.util.Set;
+
+import javax.annotation.concurrent.ThreadSafe;
+import javax.servlet.ServletException;
+import javax.servlet.http.HttpServlet;
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletResponse;
+
+import org.apache.commons.lang3.tuple.ImmutablePair;
+
+import com.google.common.base.Preconditions;
+import com.google.common.collect.Lists;
+
 import alluxio.AlluxioURI;
 import alluxio.WorkerStorageTierAssoc;
 import alluxio.client.file.FileSystem;
@@ -27,21 +46,6 @@
 import alluxio.worker.block.BlockWorker;
 import alluxio.worker.block.meta.BlockMeta;

-import com.google.common.base.Preconditions;
-
-import java.io.IOException;
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.HashSet;
-import java.util.List;
-import java.util.Set;
-
-import javax.annotation.concurrent.ThreadSafe;
-import javax.servlet.ServletException;
-import javax.servlet.http.HttpServlet;
-import javax.servlet.http.HttpServletRequest;
-import javax.servlet.http.HttpServletResponse;
-
 /**
  * Servlet that provides data for displaying block info of a worker.
  */
@@ -77,7 +81,12 @@ protected void doGet(HttpServletRequest request, HttpServletResponse response)
       // Display file block info
       try {
         UIFileInfo uiFileInfo = getUiFileInfo(fs, new AlluxioURI(filePath));
-        request.setAttribute("fileBlocksOnTier", uiFileInfo.getBlocksOnTier());
+        List<ImmutablePair<String, List<UIFileBlockInfo>>> fileBlocksOnTier = Lists.newArrayList();
+        for (Entry<String, List<UIFileBlockInfo>> e : uiFileInfo.getBlocksOnTier().entrySet()) {
+          fileBlocksOnTier.add(
+              new ImmutablePair<String, List<UIFileBlockInfo>>(e.getKey(), e.getValue()));
+        }
+        request.setAttribute("fileBlocksOnTier", fileBlocksOnTier);
         request.setAttribute("blockSizeBytes", uiFileInfo.getBlockSizeBytes());
         request.setAttribute("path", filePath);
         getServletContext().getRequestDispatcher("/worker/viewFileBlocks.jsp").forward(request,
diff --git a/core/server/src/main/java/alluxio/web/WebInterfaceWorkerGeneralServlet.java b/core/server/src/main/java/alluxio/web/WebInterfaceWorkerGeneralServlet.java
index cf7b2c5..7efd581 100644
--- a/core/server/src/main/java/alluxio/web/WebInterfaceWorkerGeneralServlet.java
+++ b/core/server/src/main/java/alluxio/web/WebInterfaceWorkerGeneralServlet.java
@@ -11,14 +11,6 @@

 package alluxio.web;

-import alluxio.Constants;
-import alluxio.Version;
-import alluxio.collections.Pair;
-import alluxio.util.FormatUtils;
-import alluxio.worker.WorkerContext;
-import alluxio.worker.block.BlockStoreMeta;
-import alluxio.worker.block.BlockWorker;
-
 import java.io.IOException;
 import java.net.InetSocketAddress;
 import java.util.ArrayList;
@@ -31,6 +23,16 @@
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;

+import com.google.common.collect.Lists;
+
+import alluxio.Constants;
+import alluxio.Version;
+import alluxio.collections.Pair;
+import alluxio.util.FormatUtils;
+import alluxio.worker.WorkerContext;
+import alluxio.worker.block.BlockStoreMeta;
+import alluxio.worker.block.BlockWorker;
+
 /**
  * Servlets that shows a worker's general information, including tiered storage details.
  */
@@ -133,6 +135,51 @@ public String getWorkerAddress() {

   }

+  /**
+   * A wrapper class of the usage info per tier for displaying in the UI.
+   * This is mainly used to avoid using Map in jsp, which could cause problem with Java 8.
+   */
+  public static class UIUsageOnTier {
+    private final String mTierAlias;
+    private final long mCapacityBytes;
+    private final long mUsedBytes;
+
+    /**
+     * Creates a new instance of {@link UIUsageOnTier}.
+     *
+     * @param tierAlias tier alias
+     * @param capacityBytes capacity in bytes
+     * @param usedBytes used space in bytes
+     */
+    public UIUsageOnTier(String tierAlias, long capacityBytes, long usedBytes) {
+      mTierAlias = tierAlias;
+      mCapacityBytes = capacityBytes;
+      mUsedBytes = usedBytes;
+    }
+
+    /**
+     * @return the tier alias
+     */
+    public String getTierAlias() {
+      return mTierAlias;
+    }
+
+    /**
+     * @return capacity in bytes
+     */
+    public long getCapacityBytes() {
+      return mCapacityBytes;
+    }
+
+    /**
+     * @return used space in bytes
+     */
+    public long getUsedBytes() {
+      return mUsedBytes;
+    }
+
+  }
+
   private static final long serialVersionUID = 3735143768058466487L;
   private final transient BlockWorker mBlockWorker;
   private final UIWorkerInfo mUiWorkerInfo;
@@ -171,20 +218,23 @@ private void populateValues(HttpServletRequest request) throws IOException {
     long usedBytes = 0L;
     Map<String, Long> capacityBytesOnTiers = storeMeta.getCapacityBytesOnTiers();
     Map<String, Long> usedBytesOnTiers = storeMeta.getUsedBytesOnTiers();
-    for (long capacity : capacityBytesOnTiers.values()) {
+    List<UIUsageOnTier> usageOnTiers = Lists.newArrayList();
+    for (String tier : capacityBytesOnTiers.keySet()) {
+      long capacity = capacityBytesOnTiers.get(tier);
+      Long nullableUsed = usedBytesOnTiers.get(tier);
+      long used = nullableUsed == null ? 0 : nullableUsed;
+
       capacityBytes += capacity;
-    }
-    for (long used : usedBytesOnTiers.values()) {
       usedBytes += used;
+
+      usageOnTiers.add(new UIUsageOnTier(tier, capacity, used));
     }

     request.setAttribute("capacityBytes", FormatUtils.getSizeFromBytes(capacityBytes));

     request.setAttribute("usedBytes", FormatUtils.getSizeFromBytes(usedBytes));

-    request.setAttribute("capacityBytesOnTiers", capacityBytesOnTiers);
-
-    request.setAttribute("usedBytesOnTiers", usedBytesOnTiers);
+    request.setAttribute("usageOnTiers", usageOnTiers);

     List<UIStorageDir> storageDirs =
         new ArrayList<UIStorageDir>(storeMeta.getCapacityBytesOnDirs().size());
diff --git a/core/server/src/main/webapp/worker/general.jsp b/core/server/src/main/webapp/worker/general.jsp
index 05de993..e6b4a4b 100644
--- a/core/server/src/main/webapp/worker/general.jsp
+++ b/core/server/src/main/webapp/worker/general.jsp
@@ -1,6 +1,7 @@
 <%@ page import="java.util.*" %>
 <%@ page import="alluxio.util.*" %>
 <%@ page import="alluxio.web.WebInterfaceWorkerGeneralServlet.UIStorageDir" %>
+<%@ page import="alluxio.web.WebInterfaceWorkerGeneralServlet.UIUsageOnTier" %>
 <%@ page import="alluxio.web.WebInterfaceWorkerGeneralServlet.UIWorkerInfo" %>

 <html>
@@ -67,18 +68,15 @@
                   <th>Total Capacity / Used</th>
                   <th><%= request.getAttribute("capacityBytes") %> / <%= request.getAttribute("usedBytes") %></th>
                 </tr>
-                <% Map<String, Long> capacityBytesOnTiers = (Map<String, Long>) request.getAttribute("capacityBytesOnTiers"); %>
-                <% Map<String, Long> usedBytesOnTiers = (Map<String, Long>) request.getAttribute("usedBytesOnTiers"); %>
-                <% for (String tierAlias : capacityBytesOnTiers.keySet()) { %>
-                  <% if (capacityBytesOnTiers.get(tierAlias) > 0) { %>
+                <% List<UIUsageOnTier> usageOnTiers = (List<UIUsageOnTier>) request.getAttribute("usageOnTiers"); %>
+                <% for (UIUsageOnTier usageOnTier : usageOnTiers) { %>
                   <tr>
-                    <th><%= tierAlias %> Capacity / Used</th>
+                    <th><%= usageOnTier.getTierAlias() %> Capacity / Used</th>
                     <th>
-                      <%= FormatUtils.getSizeFromBytes(capacityBytesOnTiers.get(tierAlias)) %> /
-                      <%= FormatUtils.getSizeFromBytes(usedBytesOnTiers.get(tierAlias)) %>
+                      <%= FormatUtils.getSizeFromBytes(usageOnTier.getCapacityBytes()) %> /
+                      <%= FormatUtils.getSizeFromBytes(usageOnTier.getUsedBytes()) %>
                     </th>
                   </tr>
-                  <% } %>
                 <% } %>
               </tbody>
             </table>
diff --git a/core/server/src/main/webapp/worker/viewFileBlocks.jsp b/core/server/src/main/webapp/worker/viewFileBlocks.jsp
index 7f263fb..1398b2e 100644
--- a/core/server/src/main/webapp/worker/viewFileBlocks.jsp
+++ b/core/server/src/main/webapp/worker/viewFileBlocks.jsp
@@ -1,5 +1,6 @@
-<%@ page import="java.util.*" %>
+<%@ page import="java.util.List" %>
 <%@ page import="alluxio.web.*" %>
+<%@ page import="org.apache.commons.lang3.tuple.*" %>
 <%@ page import="static org.apache.commons.lang.StringEscapeUtils.escapeHtml" %>

 <html>
@@ -86,11 +87,11 @@
               <th>Tier</th>
               <th>Size (Byte)</th>
             </tr>
-            <% for (Map.Entry<String, List<UIFileBlockInfo>> entry : ((Map<String, List<UIFileBlockInfo>>) request.getAttribute("fileBlocksOnTier")).entrySet()) { %>
-              <% for (UIFileBlockInfo masterBlockInfo : entry.getValue()) { %>
+            <% for (ImmutablePair<String, List<UIFileBlockInfo>> pair : (List<ImmutablePair<String, List<UIFileBlockInfo>>>) request.getAttribute("fileBlocksOnTier")) { %>
+              <% for (UIFileBlockInfo masterBlockInfo : pair.getRight()) { %>
                 <tr>
                   <td><%= masterBlockInfo.getID() %></td>
-                  <td><%= entry.getKey() %></td>
+                  <td><%= pair.getLeft() %></td>
                   <td><%= masterBlockInfo.getBlockLength() %></td>
                 </tr>
               <% } %>


diff --git a/core/server/src/main/java/alluxio/web/WebInterfaceWorkerGeneralServlet.java b/core/server/src/main/java/alluxio/web/WebInterfaceWorkerGeneralServlet.java
index 7efd581..39fd7da 100644
--- a/core/server/src/main/java/alluxio/web/WebInterfaceWorkerGeneralServlet.java
+++ b/core/server/src/main/java/alluxio/web/WebInterfaceWorkerGeneralServlet.java
@@ -16,6 +16,7 @@
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Map;
+import java.util.Map.Entry;

 import javax.annotation.concurrent.ThreadSafe;
 import javax.servlet.ServletException;
@@ -219,8 +220,9 @@ private void populateValues(HttpServletRequest request) throws IOException {
     Map<String, Long> capacityBytesOnTiers = storeMeta.getCapacityBytesOnTiers();
     Map<String, Long> usedBytesOnTiers = storeMeta.getUsedBytesOnTiers();
     List<UIUsageOnTier> usageOnTiers = Lists.newArrayList();
-    for (String tier : capacityBytesOnTiers.keySet()) {
-      long capacity = capacityBytesOnTiers.get(tier);
+    for (Entry<String, Long> entry : capacityBytesOnTiers.entrySet()) {
+      String tier = entry.getKey();
+      long capacity = entry.getValue();
       Long nullableUsed = usedBytesOnTiers.get(tier);
       long used = nullableUsed == null ? 0 : nullableUsed;


diff --git a/core/server/src/main/java/alluxio/web/WebInterfaceWorkerBlockInfoServlet.java b/core/server/src/main/java/alluxio/web/WebInterfaceWorkerBlockInfoServlet.java
index 225ea83..d13c2ba 100644
--- a/core/server/src/main/java/alluxio/web/WebInterfaceWorkerBlockInfoServlet.java
+++ b/core/server/src/main/java/alluxio/web/WebInterfaceWorkerBlockInfoServlet.java
@@ -11,25 +11,6 @@

 package alluxio.web;

-import java.io.IOException;
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.HashSet;
-import java.util.List;
-import java.util.Map.Entry;
-import java.util.Set;
-
-import javax.annotation.concurrent.ThreadSafe;
-import javax.servlet.ServletException;
-import javax.servlet.http.HttpServlet;
-import javax.servlet.http.HttpServletRequest;
-import javax.servlet.http.HttpServletResponse;
-
-import org.apache.commons.lang3.tuple.ImmutablePair;
-
-import com.google.common.base.Preconditions;
-import com.google.common.collect.Lists;
-
 import alluxio.AlluxioURI;
 import alluxio.WorkerStorageTierAssoc;
 import alluxio.client.file.FileSystem;
@@ -46,6 +27,25 @@
 import alluxio.worker.block.BlockWorker;
 import alluxio.worker.block.meta.BlockMeta;

+import org.apache.commons.lang3.tuple.ImmutablePair;
+
+import com.google.common.base.Preconditions;
+import com.google.common.collect.Lists;
+
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Map.Entry;
+import java.util.Set;
+
+import javax.annotation.concurrent.ThreadSafe;
+import javax.servlet.ServletException;
+import javax.servlet.http.HttpServlet;
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletResponse;
+
 /**
  * Servlet that provides data for displaying block info of a worker.
  */
diff --git a/core/server/src/main/java/alluxio/web/WebInterfaceWorkerGeneralServlet.java b/core/server/src/main/java/alluxio/web/WebInterfaceWorkerGeneralServlet.java
index 39fd7da..1c7bd8e 100644
--- a/core/server/src/main/java/alluxio/web/WebInterfaceWorkerGeneralServlet.java
+++ b/core/server/src/main/java/alluxio/web/WebInterfaceWorkerGeneralServlet.java
@@ -11,6 +11,16 @@

 package alluxio.web;

+import alluxio.Constants;
+import alluxio.Version;
+import alluxio.collections.Pair;
+import alluxio.util.FormatUtils;
+import alluxio.worker.WorkerContext;
+import alluxio.worker.block.BlockStoreMeta;
+import alluxio.worker.block.BlockWorker;
+
+import com.google.common.collect.Lists;
+
 import java.io.IOException;
 import java.net.InetSocketAddress;
 import java.util.ArrayList;
@@ -24,16 +34,6 @@
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;

-import com.google.common.collect.Lists;
-
-import alluxio.Constants;
-import alluxio.Version;
-import alluxio.collections.Pair;
-import alluxio.util.FormatUtils;
-import alluxio.worker.WorkerContext;
-import alluxio.worker.block.BlockStoreMeta;
-import alluxio.worker.block.BlockWorker;
-
 /**
  * Servlets that shows a worker's general information, including tiered storage details.
  */

diff --git a/core/server/src/main/java/alluxio/web/WebInterfaceWorkerBlockInfoServlet.java b/core/server/src/main/java/alluxio/web/WebInterfaceWorkerBlockInfoServlet.java
index d13c2ba..028b544 100644
--- a/core/server/src/main/java/alluxio/web/WebInterfaceWorkerBlockInfoServlet.java
+++ b/core/server/src/main/java/alluxio/web/WebInterfaceWorkerBlockInfoServlet.java
@@ -27,10 +27,9 @@
 import alluxio.worker.block.BlockWorker;
 import alluxio.worker.block.meta.BlockMeta;

-import org.apache.commons.lang3.tuple.ImmutablePair;
-
 import com.google.common.base.Preconditions;
 import com.google.common.collect.Lists;
+import org.apache.commons.lang3.tuple.ImmutablePair;

 import java.io.IOException;
 import java.util.ArrayList;
diff --git a/core/server/src/main/java/alluxio/web/WebInterfaceWorkerGeneralServlet.java b/core/server/src/main/java/alluxio/web/WebInterfaceWorkerGeneralServlet.java
index 1c7bd8e..e9e0dad 100644
--- a/core/server/src/main/java/alluxio/web/WebInterfaceWorkerGeneralServlet.java
+++ b/core/server/src/main/java/alluxio/web/WebInterfaceWorkerGeneralServlet.java
@@ -139,6 +139,7 @@ public String getWorkerAddress() {
   /**
    * A wrapper class of the usage info per tier for displaying in the UI.
    * This is mainly used to avoid using Map in jsp, which could cause problem with Java 8.
+   * See https://tachyon.atlassian.net/browse/ALLUXIO-22.
    */
   public static class UIUsageOnTier {
     private final String mTierAlias;
